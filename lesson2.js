"use strict";

// Урок 2. Основные операторы JavaScript

/*1. Дан код:
var a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2
d = b++; alert(d);           // 1
c = (2+ ++a); alert(c);      // 5
d = (2+ b++); alert(d);      // 4
alert(a);                    // 3
alert(b);                    // 3
Почему код даёт именно такие результаты?

c = ++a; alert(c);           // 2
Переменная a = 1, в результате получится с = 2, так как используется префиксная форма инкремента,
которая увеличивает переменную на единицу.
Префиксная форма ++ записывается перед переменной и означает, что сначала, нужно прибавить к переменной(с) единицу, а потом вывести результат в alert.

d = b++; alert(d);           // 1
Переменная b = 1, в результате получится d = 1, так как используется постфиксная форма инкремента,
которая увеличивает переменную на единицу.
Постфиксная форма ++ записывается после переменной и означает, что нужно прибавть к переменной(b) единицу, только после того, как она будет выведена в alert.

c = (2+ ++a); alert(c);      // 5
Переменная(с) будет равна 5, так как переменная(a) уже была увеличена на единицу и равна 2, префиксный инкремент увеличит ее еще на единицу
и она будет равна 3. Далее будет произведено сложение 2+3=5.
Именно поэтому, когда переменная(a) будет далее выведена в alert, она будет равна 3.
alert(a);                    // 3


d = (2+ b++); alert(d);      // 4
Переменная d будет равна 4, так как переменная b уже была увеличена на единицу постфиксной формой инкремента и равна 2, далее будет произведено сложение 2+2=4.
И после этого переменная b будет увеличена на единицу и будет равна 3 (т.е. b = 3).
Именно поэтому, когда переменная b будет выведена далее в alert, она будет равна 3.
alert(b);                    // 3
*/


/* 2. Чему будет равен x в примере ниже?
var a = 2;
var x = 1 + (a *= 2);

Запись a *= 2 (сокращенный оператор - присваивание с умножением) в полном варианте будет выглядеть так: a = a * 2
Соответственно 2*2=4, далее 1+4=5. И х будет равен 5.
Ответ: 5.

*/

/* 3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения.
Затем написать скрипт, который работает по следующему принципу:
если a и b положительные, вывести их разность;
если а и b отрицательные, вывести их произведение;
если а и b разных знаков, вывести их сумму;
ноль можно считать положительным числом. */

// let a = 2;
// let b = -5;
//
// if (a >= 0 && b >= 0){
//     console.log(`Разность чисел равна = ${a - b}`)
// } else {
//     if (a < 0 && b < 0) {
//         console.log(`Произведение чисел равно = ${a * b}`)
//     } else {
//             console.log(`Сумма чисел равна = ${a + b}`)
//         }
// }

// 4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15.

// const a = 10;
//
// switch (a) {
//     case 0:
//         console.log('0');
//     case 1:
//         console.log('1');
//     case 2:
//         console.log('2');
//     case 3:
//         console.log('3');
//     case 4:
//         console.log('4');
//     case 5:
//         console.log('5');
//     case 6:
//         console.log('6');
//     case 7:
//         console.log('7');
//     case 8:
//         console.log('8');
//     case 9:
//         console.log('9');
//     case 10:
//         console.log('10');
//     case 11:
//         console.log('11');
//     case 12:
//         console.log('12');
//     case 13:
//         console.log('13');
//     case 14:
//         console.log('14');
//     case 15:
//         console.log('15');
//         break;
// }

/* 5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return. */

function getResultOfAddition(arg1, arg2) {
    return arg1 + arg2;
}

function getResultOfSubtraction(arg1, arg2) {
    return arg1 - arg2;
}

function getResultOfMultiplication(arg1, arg2) {
    return arg1 * arg2;
}

function getResultOfDivision(arg1, arg2) {
    return arg1 / arg2;
}

/* 6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation),
где arg1, arg2 – значения аргументов, operation – строка с названием операции.
В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 5)
и вернуть полученное значение (использовать switch). */

function mathOperation(arg1, arg2, operation) {
    switch (operation) {
        case "+":
            return getResultOfAddition(arg1, arg2)
        case "-":
            return getResultOfSubtraction(arg1, arg2);
        case "*":
            return getResultOfMultiplication(arg1, arg2);
        case "/":
            if (arg2 === 0) {
                break;
            }
            return getResultOfDivision(arg1, arg2);
    }
}

console.log(mathOperation(8, 5, "-"));

